import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import 'bootstrap/dist/css/bootstrap-grid.min.css';
/* Imports helper functions for converting props to bootstrap notations */
import { getStyleClass } from '../../utility/BootstrapNotation';

const cols = props => {
  if(props.gutter){
    return (
      React.Children.map(props.children, child => (
        <React.Fragment>
          {React.cloneElement(child, {m: props.gutter})}
        </React.Fragment>
      ))
    );
  }
  else { return (props.children); }
};

const Row = props => {

  return (
    <div
      className={classNames(
        'row',
        getStyleClass('p', props.p),
        getStyleClass('m', props.m),
        props.className
      )}
      id={props.id}
      style={props.style}
    >
      {cols(props)}
    </div>
  );
};

Row.propTypes = {
  /*
   * Additional custom class names for the row
   */
  className: PropTypes.oneOfType([
    PropTypes.array,
    PropTypes.object,
    PropTypes.string,
  ]),
  /*
 * Margin to be added to columns of the row
 */
  gutter: PropTypes.oneOf([0,1,2,3,4,5]),
  /*
   * Unique id for the row. Autogenerated if empty.
   */
  id: PropTypes.string,
  /*
   * Margin for the row.
   * Either accepts a single value and applies for all sides,
   * or accepts an array of 2 values [horizontal, vertical], or 4 values [top, right, bottom, left].
   * Values should be in the range - [0,5]
   */
  m: PropTypes.oneOfType([
    PropTypes.oneOf([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]),
    PropTypes.array,
  ]),
  /*
   * Padding for the row
   * Either accepts a single value and applies for all sides,
   * or accepts an array of 2 values [horizontal, vertical], or 4 values [top, right, bottom, left].
   * Values should be in the range - [0,5]
   */
  p: PropTypes.oneOfType([
    PropTypes.oneOf([0, 1, 2, 3, 4, 5]),
    PropTypes.array,
  ]),
  /*
   *  Additional overrideable styles for the row
   */
  style: PropTypes.object,
};

export default Row;
